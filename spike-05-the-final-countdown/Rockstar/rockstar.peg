@namespace Rockstar
@classname Parser
@using System.Globalization

// program		= statement* EOF

additive <double> -memoize
    = left:additive "+" right:multiplicative { left + right }
    / left:additive "-" right:multiplicative { left - right }
    / multiplicative

multiplicative <double> -memoize
    = left:multiplicative "*" right:power { left * right }
    / left:multiplicative "/" right:power { left / right }
    / power

power <double>
    = left:primary "^" right:power { Math.Pow(left, right) }
    / primary

primary <double> -memoize
    = decimal
    / "-" primary:primary { -primary }
    / "(" additive:additive ")" { additive }

decimal <double>
    = value:([0-9]+ ("." [0-9]+)?) { double.Parse(value, CultureInfo.InvariantCulture) }


/*
statement	= assignment_stmt
			/ output_stmt

assignment_stmt
			= identifier whitespace "is" whitespace expression
				{ new Assignment(identifier, expression) }

output_stmt = output whitespace expression
				{ new Output(identifier, expression) }

identifier	= [a-z]+

output		= "say" / "shout"

expression = identifier { new Lookup(identifier) }
			/ number

number 		= value:([0-9]+ ("." [0-9]+)?)
				{ double.Parse(value, CultureInfo.InvariantCulture) }

whitespace = [ \t]

*/

// EOF = !.

