using System;
using System.Collections.Generic;
using Microsoft.CodeAnalysis;

namespace Rockstar.Generator;

[Generator]
public class Generator : ISourceGenerator {
	private static Dictionary<string, string[]> classes = new() {
		{ "Binary", ["Expr lhs", "Token op", "Expr lhs"] },
		{ "Grouping", ["Expr expr"] },
		{ "String", ["string value"] },
		{ "Number", ["decimal value"] },
		{ "Unary", ["Token op, Expr expr "] }
	};

	public void Execute(GeneratorExecutionContext context) {
		var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken)!;
		var source =
			$$"""
			  // <auto-generated/>
			  namespace {{mainMethod.ContainingNamespace}};

			  using System;

			  public static class GeneratedClass {
			  	public static void GeneratedMethod()
			  		=> Console.WriteLine("IT WORKS! (generated at {{DateTime.Now}}");
			  }
			  """;
		string[] types = ["Foo", "Bar", "Baz", "Bumble"];
		foreach (var thing in types) {
			source +=
				$$"""

				  public class {{thing}}Class(string s) {
				  	public void Method() => Console.WriteLine(s);
				  }
				  """;
		}
		context.AddSource("GeneratedClass.g.cs", source);
	}

	public void Initialize(GeneratorInitializationContext context) {
		// No initialization required for this one
	}
}